# yaml-language-server: $schema=https://raw.githubusercontent.com/prefix-dev/recipe-format/main/schema.json
schema_version: 1

context:
  name: visions
  version: "0.8.1"
  python_min: '3.10'

package:
  name: ${{ name|lower }}
  version: ${{ version }}

source:
  url: https://pypi.org/packages/source/${{ name[0] }}/${{ name }}/visions-${{ version }}.tar.gz
  sha256: 37f55c37d7bcf124054e612850b28a4f0bab9b200733cedd8f1781c3ac5cc3f0

build:
  number: 0
  noarch: python
  script: ${{ PYTHON }} -m pip install . -vv --no-deps --no-build-isolation

requirements:
  host:
    - python ${{ python_min }}.*
    - setuptools >=61.0.0
    - wheel
    - pip
  run:
    - python >=${{ python_min }},<4.0
    - numpy >=1.23.2
    - pandas >=2.0.0
    - attrs >=19.3.0
    - networkx >=2.4
    - multimethod >=1.4
    - puremagic
  run_constraints:
    # https://github.com/dylan-profiler/visions/blob/v0.8.1/pyproject.toml#L34C1-L46C17
    # type_geometry
    - shapely
    # type_image_path
    - imagehash
    - Pillow
    - puremagic
    # plotting
    - pydot
    - pygraphviz
    - matplotlib-base

tests:
#  - python:
#      imports:
#        - visions
#      pip_check: true
#      python_version: ${{ python_min }}.*
  - requirements:
      run:
        - pip
        - python ${{ python_min }}.*
        # type_geometry
        - shapely
        # type_image_path
        - imagehash
        - Pillow
        - puremagic
        # plotting
        - pydot
        - pygraphviz
        - matplotlib-base
    script:
      - pip check
      - python -c "import visions; assert visions.__version__ == '${{ version }}'"
      #- echo 'from visions import VisionsSystem; v = VisionsSystem(); assert v' | ${{ PYTHON }}
      #- python -c 'import visions; v = visions.VisionsSystem(); assert v'

about:
  homepage: https://github.com/dylan-profiler/visions
  license: BSD-4-Clause
  license_file: LICENSE
  summary: |
    Visions provides an extensible suite of tools to support common data analysis operations including 
    type inference on unknown data, casting data types and automated data summarization.
  documentation: https://dylan-profiler.github.io/visions/
  repository: https://github.com/dylan-profiler/visions

extra:
  recipe-maintainers:
    - philip-khor
    - rxm7706
