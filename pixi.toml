#                             VVVVVV  minimum `pixi` version
"$schema" = "https://pixi.sh/v0.59.0/schema/manifest/schema.json"

[workspace]
name = "staged-recipes"
description = "The entry point to conda-forge"
version = "0.1.0"
license = "BSD-3-Clause"
license-file = "LICENSE.txt"
authors = ["@conda-forge/core"]
channels = ["conda-forge"]
platforms = [
    "linux-64", "linux-aarch64", "osx-64", "osx-arm64", "win-64"
    # TODO: add here and below in `feature.win` when possible
    # "win-arm64"
]

[feature.python.dependencies]
python = "3.12.*"

[feature.build.dependencies]
conda = ">=25.9.0"
conda-libmamba-solver = ">=24.9.0"
conda-build = ">=25.3.1"
conda-index = ">=0.3.0"
conda-forge-ci-setup = ">=4.9.3,<5.0"
conda-forge-pinning = "*"
frozendict = "*"
networkx = "2.4.*"
rattler-build-conda-compat = ">=1.2.0,<2.0.0a0"
#### Unleash Pixi - Added to ensure single a build pack with pixi will work for cookiecutters, plain python, conda, nodejs, rust, c, c++ code.
## For use with CookieCutters
cookiecutter = ">=2.6.0,<3.0.0"
cruft = ">=2.16.0,<3.0.0"
jinja2-ospath = ">=0.3.0,<1.0.0"
## For Building Plain Python Projects
cibuildwheel = ">=3.2.1"
pip = ">=25.2"
setuptools = "<81.0.0"
setuptools-scm = ">=9.2.2,<10.0.0"
twine = ">=6.2.0"
uv = ">=0.9.7,<1.0.0"
wheel = ">=0.45.1"
## For Building Javsscript and nodejs Projects
nodejs = ">=24.0.0,<25.0.0"  # Pin to LTS version
pnpm = ">=10.14.0,<11.0.0"
## Extensions for Conda and Conda-build Projects
conda-lock = ">=3.3.4,<1.0.0"
conda-pack = ">=0.8.1,<1.0.0"
conda-tree = ">=1.1.1,<1.0.0"
feedrattler = ">=0.3.4,<1.0.0"
### Extensions Pixi - enabling all Python, C,C++, Rust, CMake Projects
pixi = ">=0.59.0,<1.0.0"
rattler-build = ">=0.49.0,<1.0.0"
pixi-build-rattler-build = ">=0.3.4,<1.0.0"
pixi-build-cmake = ">=0.3.4,<1.0.0"
pixi-build-python = ">=0.4.1,<1.0.0"
pixi-build-rust = ">=0.4.1,<1.0.0"
pixi-diff = ">=0.1.3,<1.0.0"
pixi-inject = ">=0.1.1,<1.0.0"
pixi-install-to-prefix = ">=0.1.2,<1.0.0"
pixi-kernel = ">=0.7.0,<1.0.0"
pixi-outdated = ">=0.2.1,<1.0.0"
pixi-pack = ">=0.7.4,<1.0.0"
pixi-pycharm = ">=0.0.9,<1.0.0"
pixi-unpack = ">=0.7.4,<1.0.0"
py-rattler = ">=0.16.0,<1.0.0"
py-rattler-build = ">=0.47.0,<1.0.0"

[feature.linux]
# The linux feature runs on every platform that can run Docker.
platforms = ["linux-64", "linux-aarch64", "osx-64", "osx-arm64", "win-64"]
[feature.linux.tasks.build-linux]
description = "build for Linux inside a docker container"
cmd = "python build-locally.py --filter 'linux*'"

# The osx env will run conda-build directly on the machine.
[feature.osx]
platforms = ["osx-64", "osx-arm64"]
[feature.osx.tasks.build-osx]
description = "build directly on a MacOS host machine"
cmd = "python build-locally.py --filter 'osx*'"
[feature.osx.tasks.build-osx.env]
CONDA_BLD_PATH = "$PIXI_PROJECT_ROOT/build_artifacts"
MINIFORGE_HOME = "$CONDA_PREFIX"
OSX_SDK_DIR = "$PIXI_PROJECT_ROOT/.pixi/macOS-SDKs"

# The windows env will run conda-build directly on the machine.
[feature.win]
platforms = ["win-64"]
[feature.win.tasks.build-win]
description = "build directly on a Windows host machine"
cmd = "python build-locally.py --filter 'win*'"
[feature.win.tasks.build-win.env]
CONDA_BLD_PATH = "$PIXI_PROJECT_ROOT/build_artifacts"
MINIFORGE_HOME = "$CONDA_PREFIX"

[feature.grayskull.dependencies]
grayskull = ">=2.7.3"
[feature.grayskull.tasks.pypi]
description = "generate a recipe for a PyPI package name with `grayskull`"
cmd = "cd recipes && grayskull pypi --strict-conda-forge"
[feature.grayskull.tasks.cran]
description = "generates a recipe for a CRAN package name with `grayskull`"
cmd = "cd recipes && grayskull cran --strict-conda-forge"

[feature.conda-smithy.dependencies]
conda-smithy = ">=3.44.6,<4"
shellcheck = "*"
[feature.conda-smithy.tasks.lint]
description = "validate all recipes with `conda-smithy`"
cmd = "conda-smithy recipe-lint --conda-forge recipes/*"

[environments]
# linux only needs Python to run build-locally.py. Everything else happens in Docker.
linux = ["linux", "python"]
# osx and win do run natively on the machine, so we need the build deps too
osx = ["osx", "python", "build"]
win = ["win", "python", "build"]
build = ["python", "build"]
grayskull = ["python", "grayskull"]
conda-smithy = ["python", "conda-smithy"]
